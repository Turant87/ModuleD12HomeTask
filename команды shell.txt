1. Создать двух пользователей (с помощью метода User.objects.create_user).
user1 = User.objects.create(username='Иван', first_name='Turant')
user2 = User.objects.create(username='Роман', first_name='Jumb')

2. Создать два объекта модели Author, связанные с пользователями.
Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category.
Category.objects.create(name='Football')
Category.objects.create(name='Basketball')
Category.objects.create(name='IT')
Category.objects.create(name='Apple')

4. Добавить 2 статьи и 1 новость.
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Иван')), categoryType='NW', title='News about iPhone16', text='Все новости о iPhone16')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Иван')), categoryType='AR', title='Review football week', text='Обзор матчей за неделю')
Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Роман')), categoryType='AR', title='Review basketball week', text='Обзор матчей за неделю')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
Post.objects.get(pk=1).postCategory.add(Category.objects.get(name='Apple'))
Post.objects.get(pk=2).postCategory.add(Category.objects.get(name='Football'), Category.objects.get(name='Basketball'))
Post.objects.get(pk=3).postCategory.add(Category.objects.get(name='Football'), Category.objects.get(name='Basketball'))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(commentUser=User.objects.get(username='Роман'), commentPost=Post.objects.get(title='News about iPhone16'), text='Самсунг лучше')
Comment.objects.create(commentUser=User.objects.get(username='Иван'), commentPost=Post.objects.get(title='News about iPhone16'), text='Не согласен Apple the BEST')
Comment.objects.create(commentUser=User.objects.get(username='Иван'), commentPost=Post.objects.get(title='Review basketball week'), text='Не люблю баскетбол')
Comment.objects.create(commentUser=User.objects.get(username='Роман'), commentPost=Post.objects.get(pk=3), text='Не люблю футбол')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(pk=1).like()
Post.objects.get(title='News about iPhone16').like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()
Comment.objects.get(text='Не люблю футбол').dislike()

8. Обновить рейтинги пользователей.
Author.objects.get(authorUser=User.objects.get(username='Иван')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Роман')).update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
Comment.objects.filter(commentPost = Post.objects.order_by('-rating').first()).values('dateCreation', 'commentUser__username', 'rating', 'commentPost__title', 'text')[0]

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Comment.objects.filter(commentPost = Post.objects.order_by('-rating').first()).values('dateCreation', 'commentUser__username', 'rating', 'text')